// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pinger

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GRPCPingerClient is the client API for GRPCPinger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCPingerClient interface {
	// check service liveness
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gRPCPingerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCPingerClient(cc grpc.ClientConnInterface) GRPCPingerClient {
	return &gRPCPingerClient{cc}
}

func (c *gRPCPingerClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.GRPCPinger/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCPingerServer is the server API for GRPCPinger service.
// All implementations must embed UnimplementedGRPCPingerServer
// for forward compatibility
type GRPCPingerServer interface {
	// check service liveness
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedGRPCPingerServer()
}

// UnimplementedGRPCPingerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCPingerServer struct {
}

func (UnimplementedGRPCPingerServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGRPCPingerServer) mustEmbedUnimplementedGRPCPingerServer() {}

// UnsafeGRPCPingerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCPingerServer will
// result in compilation errors.
type UnsafeGRPCPingerServer interface {
	mustEmbedUnimplementedGRPCPingerServer()
}

func RegisterGRPCPingerServer(s grpc.ServiceRegistrar, srv GRPCPingerServer) {
	s.RegisterService(&_GRPCPinger_serviceDesc, srv)
}

func _GRPCPinger_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCPingerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GRPCPinger/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCPingerServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCPinger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GRPCPinger",
	HandlerType: (*GRPCPingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GRPCPinger_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pinger.proto",
}
